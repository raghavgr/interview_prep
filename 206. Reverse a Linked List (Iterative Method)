# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        #iterative method
        if head is None or head.next is None:
            return head         #assume a base case
        
        prev = None
        curr = head
        next = None
        while(curr!=None):
            next = curr.next    #save the location of the next
            curr.next = prev    #change/reverse the dirn od the pointer
            prev = curr         #advance prev and next
            curr = next         #advance prev and next

        return prev    
            
            
  #Both time and space complexity is O(n)
  
            
            
            
    
        
