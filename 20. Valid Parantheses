class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        #failed attempt-1
        # pairs = { "(": ")", "{" : "}", "[" : "]"}
        # stack = []
        # for i in s:
        #     if i in pairs.keys():
        #         stack.append(i)
        #     elif i in pairs.values():
        #         if stack == [] or stack.pop() != i:
        #             return False
        #     else:
        #         return False
        # return stack == []
        
        #failed attempt-2        
        # stack = []
        # dict = {"]":"[", "}":"{", ")":"("}
        # for char in s:
        #     if char in dict.values():
        #         stack.append(char)
        #     elif char in dict.keys():
        #         if stack == [] or dict[char] != stack.pop():
        #             return False
        #     else:
        #         return False
        # return stack == []
        
        stack = []
        pairs = {')': '(' , '}' : '{', ']':'['}
        
        for i in s:
            if i in pairs.values():   #checking the open braces declared as values in dict
                stack.append(i)
            elif i in pairs.keys():
                if len(stack) == 0 or stack.pop()!= pairs[i]:           # element compared with the one with 0 len stack
                    return False
            else:
                return False
        return stack == []
            
