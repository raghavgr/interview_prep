# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if(head == None):
            return False
        slow = head    #assign slow and fast
        fast = head.next
        while(fast and fast.next):    #until this condition remains true, do the following
            slow = slow.next
            fast = fast.next.next
            if(slow == fast):         #check if fast and slow are equal 
                return True           #return true if they match
        return False
